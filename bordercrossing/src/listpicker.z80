include "src/hardware.inc"

; debug: show where canvas is not yet replaced
SHOW_UNINITED_CANVAS equ 0
PAGE_MAX_HEIGHT equ 7

section "teststate", WRAM0
wCursorY::    ds 1
wCursorPage:: ds 1
wDrawY:       ds 1
wPageHeight:  ds 1

section "List picker", ROM0
cls_set_title::
  ; Clear tilemap to white ($7F) with black ($7E) bars at top and bottom
  ld h, $7F
  call clear_scrn0_to_h
  ld a, $7E
  ld hl, $9800
  ld c, 64
  rst memset_tiny
  ld hl, $9A00
  ld c, 64
  rst memset_tiny

  ; Clear other canvases
  ld de, $8800
  ld bc, 512 * 7
  ld h, e
  call memset
  ld h, $FF
  ld bc, 512 - 16
  call memset
  ld h, SHOW_UNINITED_CANVAS
  ld bc, 16
  call memset

  ; Clear sprite positions
  xor a
  ld [wDrawY], a
  ld [wPageHeight], a
  ld hl, _OAMRAM
  ld c, 160
  rst memset_tiny
  ld hl, SOAM
  ld c, 160
  rst memset_tiny

  ; Draw title
  call Vwf16Clear
  ld b, 0
  ld hl, program_name
  call Vwf16DrawStr
  call Vwf16Invert
  call Vwf16ConvertToCHR
  ld hl, wVWFRenderBuffer + $0200 - 16
  xor a
  ld c, 16
  rst memset_tiny
  ld hl, $9803
  ld bc, $600E
  call Vwf16SetTilemap
  ld hl, wVWFRenderBuffer
  ld de, $8600
  ld bc, $01F0
  jp memcpy

listpicker::
  call lcd_off
  call cls_set_title

  ; Set VWF canvas for border titles
  ld hl, $9842
  ld bc, $8010
  .initcanvasloop:
    push bc
    push hl
    call Vwf16SetTilemap
    pop hl
    pop bc
    ld a, b
    add 32
    ld b, a
    ld de, 64
    add hl, de
    bit 1, h  ; reached 9A00
    jr z, .initcanvasloop

  ; Draw bottom border
  call Vwf16Clear
  ld b, 0
  ld hl, listpicker_status_msg
  call Vwf16DrawStr
  call Vwf16Invert
  call Vwf16ConvertToCHR
  ld hl, $9A05
  ld bc, $600A
  call Vwf16SetTilemap
  ld hl, wVWFRenderBuffer
  ld de, $9600
  ld bc, $0140
  call memcpy

  ; TODO: Load cursor sprite

  ld a, %11100100
  ldh [rBGP], a
  ld a, IEF_VBLANK
  ldh [rIE], a
  ld a, [hCapability]
  rra
  call c, sgb_unfreeze
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8000
  ldh [rLCDC], a
  ei
.loop:
  ; 1. Wait for LY>=16 then change LCDC to LCDCF_ON|LCDCF_BGON|LCDCF_BG8000
  .lyspin:
    ldh a, [rLY]
    sub 16
    cp 144-16
    jr nc, .lyspin
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_OBJON|LCDCF_BG8800
  ldh [rLCDC], a

  ; TODO: Move cursor

  ; TODO: Draw one title

  ; Wait for vblank
  call wait_vblank_irq
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_OBJON|LCDCF_BG8000
  ldh [rLCDC], a
  ; TODO: do other tasks using vblank time

  ; Read the controller; do we want to quit?
  call read_pad
  ldh a, [hNewKeys]
  and PADF_START|PADF_A
  jr z, .loop
  ret

listpicker_status_msg: db "A: Preview", 0

; Hardcoded bank number caution:
; Border list is at the very start of ROMX[1], so that the
; end-user inserter can replace the borders.
section "Border list", ROMX[$4000], BANK[1]
border_list:
  dw border0_name
  dw border0
  db bank(border0)

  dw border1_name
  dw border1
  db bank(border1)

  dw border2_name
  dw border2
  db bank(border2)

  dw border3_name
  dw border3
  db bank(border3)

  dw border4_name
  dw border4
  db bank(border4)

  dw $FFFF

border0_name: db "Canada",0
border1_name: db "Classic Mac OS",0
border2_name: db "macOS Big Sur",0
border3_name: db "Mexico",0
border4_name: db "Ross by Yoey",0

; The remainder of all banks can go anywhere
section "Border0", ROMX
border0: incbin "obj/gb/canada.border"
section "Border1", ROMX
border1: incbin "obj/gb/classic_mac.border"
section "Border2", ROMX
border2: incbin "obj/gb/sameboy.border"
section "Border3", ROMX
border3: incbin "obj/gb/mexico.border"
section "Border4", ROMX
border4: incbin "obj/gb/Ross_by_Yoey.border"

;
; Wait for a Game Boy cartridge swap
;
; Copyright 2022 Damian Yerrick
; 
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"

section "PakSwap_setup", ROM0

wait_for_pakswap::
  call cls_set_title

  ; VRAM map for pak swap
  ; $8600-$87FF: Title bar
  ; $8800-$89FF: Title of border
  ; $8A00-$8BFF: "Swap paks now!" prompt
  ; $8C00-$93FF: Monospace font for drawing cartridge name
  ; $9400-$94FF: Cartridge type images
  ; $9600-$97FF: "B: Back; A: Play" prompt

  ld hl, $9842
  ld bc, $8010
  call Vwf16SetTilemap
  ld hl, wCursorY
  ld a, [hl+]  ; add cursor Y
  add [hl]     ; to page start
  ld b, 0
  call listpicker_draw_a_at_b
  ld hl, wVWFRenderBuffer
  ld de, $8800
  ld bc, $200
  call memcpy

  ; Draw prompt and status bar
  ld a, $A0
  ld de, $9902
  ld hl, pakswap_prompt_msg
  call Vwf16DrawStrAt
  call Vwf16Clear
  ld b, 1
  ld hl, back_play_status_msg
  call Vwf16DrawStr
  call Vwf16Invert
  call Vwf16ConvertToCHR
  ld hl, $9A03
  ld bc, $600E
  call Vwf16SetTilemap
  ld hl, wVWFRenderBuffer
  ld de, $9600
  ld bc, $01C0
  call memcpy

  ; Load assets for cart name check
  ld hl, $8C00
  ld de, fink_mono_pb16
  ld b, 128 + 16
  call pb16_unpack_block

  ; Load Pak Swap code into HRAM
  ld hl, pakswap_hram_LOAD
  ld de, pakswap_hram_RUN
  call memcpy_pascal16
  ld hl, pakswap_wram_LOAD
  ld de, pakswap_wram_RUN
  call memcpy_pascal16

  .release_wait:
    call read_pad
    ld a, [hCurKeys]
    or a
    jr nz, .release_wait

  ld a, %11111111
  ldh [rBGP], a
  ld a, IEF_VBLANK
  ldh [rIE], a
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8000
  ldh [rLCDC], a
  call sgb_unfreeze
  ld a, %11100100
  ldh [rBGP], a
  di
  jp wait_for_pakswap_tail

pakswap_prompt_msg: db "Swap paks now!",0
back_play_status_msg: db "B: Back   A: Play",0
fink_mono_pb16:
  incbin "obj/gb/finkmono.2bpp.pb16"
  incbin "obj/gb/carttypeicons.2bpp.pb16"

; Part that runs in RAM ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "PakSwap_RAM_code", ROM0

pakswap_hram_LOAD:
  dw pakswap_hram_RUN_end-pakswap_hram_RUN
load "PakSwap_HRAMCODE", HRAM
pakswap_hram_RUN:

wait_for_pakswap_tail:
.loop:

  ; Access WRAM once every 8 frames
  ldh a, [hVblanks]
  inc a
  ldh [hVblanks], a
  and $07
  call z, wait_for_pakswap_wram

  ; 1. Wait for LY>=16 then change LCDC to LCDCF_ON|LCDCF_BGON|LCDCF_BG8000
  .lyspin:
    ldh a, [rLY]
    sub 16
    cp 144-16
    jr nc, .lyspin
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8800
  ldh [rLCDC], a

  ; Wait for vblank
  xor a
  ldh [rIF], a
  halt

  ; Read only the buttons (not the Control Pad)
  ; while turning on rendering
  ld hl, rP1
  ld a, P1F_GET_BTN
  ld [hl], a
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8000
  ldh [rLCDC], a
  ld c, P1F_GET_NONE
  ld a, [hl]
  ld [hl], c
  cpl
.hAndInstruction:
  and PADF_START|PADF_A|PADF_B
  jr z, .loop
  jp pakswap_handle_exit

pakswap_hram_RUN_end:
endl


pakswap_wram_LOAD:
  dw pakswap_wram_RUN_end-pakswap_wram_RUN
load "PakSwap_WRAMCODE", WRAM0
pakswap_wram_RUN:

rom_header_title equ $0134
SIZEOF_HEADER_TITLE equ 15
SIZEOF_SGB_PACKET equ 16
rom_gbc_flag equ $0143  ; >$80: GBC
rom_sgb_flag equ $0146  ; $03: SGB

wSGBDisablePacket:
  db $0E << 3 | 1  ; ICON_EN
  db %100  ; bit 2: ignore SGB from here on out
  ds wSGBDisablePacket-@+SIZEOF_SGB_PACKET, 0

wait_for_pakswap_wram:
  ; throbber
  ldh a, [hVblanks]
  and $10
  cp 1
  ld a, low(("." - " ") * 2 + $C0)
  adc 0
  ld [$99F3], a

  ; check if inserted
  ld a, [$106]
  cp $66
  jr z, .is_inserted
    ld a, PADF_START|PADF_A
    ; ldh [hAndInstruction+1], a

    ; Hide B button prompt
    ld a, $7E
    ld hl, $9a02
    ld b, 8
    :
      ld [hl+], a
      dec b
      jr nz, :-
    ld hl, $9a22
    ld b, 8
    :
      ld [hl+], a
      dec b
      jr nz, :-

    ; Hide inserted cartridge name
    inc a
    ld hl, $99C1
    ld b, 18
    :
      ld [hl+], a
      dec b
      jr nz, :-
    ld hl, $99E1
    ld b, 18
    :
      ld [hl+], a
      dec b
      jr nz, :-

    ; Tell Super Game Boy to ignore further packets so that the
    ; inserted game cannot overwrite the border.  Call this after yank.
    ld hl, wSGBDisablePacket
    ld a, [hl]
    or a
    call nz, pakswap_sgb_send  ; Don't call if already called
    xor a
    ld [wSGBDisablePacket], a
    ret

  .is_inserted:
    ; Display the header name of the inserted cartridge
    ld de, $99C3
    ld hl, rom_header_title
    ld b, 15
    .nameloop:
      ld a, [hl+]
      add a
      jr z, .namepad
      jr c, .namepad
      ; 40-7E: punctuation; 80-BE: uppercase; C0-FE: lowercase
      cp $C0
      jr c, :+
        sub $40
      :
      add $80
      ld [de], a
      set 5, e
      inc a
      ld [de], a
      res 5, e
      inc e
      dec b
      jr nz, .nameloop
    jr .namenopad
    .namepad:
      ld a, $C0
      ld [de], a
      set 5, e
      ld [de], a
      res 5, e
      inc e
      dec b
      jr nz, .namepad
    .namenopad:

    ; Display the platform (GB, SGB, GBC, GBC only)
    ; of the inserted cartridge
    ld a, [rom_gbc_flag]
    swap a
    and $0C
    cp $0C  ; GBC-only ($C0) overrides others
    jr z, .have_cart_type
      cp $04  ; $40-$7F are the end of a title, not a GBC flag
      jr nz, :+
        xor a
      :
      ; SGB enhanced overrides GBC enhanced
      ld b, a
      ld a, [rom_sgb_flag]
      cp $03
      ld a, b
      jr nz, .have_cart_type
      ld a, $04
    .have_cart_type:
    ld hl, $99C1
    or a, $40
    ld [hl+], a
    inc a
    ld [hl-], a
    inc a
    set 5, l
    ld [hl+], a
    inc a
    ld [hl-], a
    
  ret

pakswap_handle_exit:
  and PADF_B
  ret nz  ; If B pressed, go back to menu

  ; Make some approximation of the parts of the GB's power-up state
  ; that commercial games care about (apart from speedrun scene)
  xor a
  ldh [rLCDC], a
  ld hl, $8000
  .clrloop:
    ld [hl+], a
    bit 5, h
    jr z, .clrloop
  ldh [rIE], a
  ldh [rIF], a
  ld a, %00000011
  ldh [rBGP], a
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8000
  ldh [rLCDC], a
  .lyloop:
    ldh a, [rLY]
    cp 144
    jr nz, .lyloop

  ld sp, $FFFE
  ld a, 1
  jp $0100

;;
; Sends ONE Super Game Boy packet starting at HL.
; @return HL first byte after end of last packet
pakswap_sgb_send:

  ; Start transfer by briefly asserting both halves of the key matrix
  xor a
  ldh [rP1],a
  ld a,$30
  ldh [rP1],a
  ld b,SIZEOF_SGB_PACKET
.byteloop:
  ld a,[hl+]  ; Read a byte from the packet

  ; Put bit 0 in CF and the rest (and a 1) into D.  Once this 1
  ; is shifted out of D, D is 0 and the byte is finished.
  scf      ; A = hgfedcba, CF = 1
  rra      ; A = 1hgfedcb, CF = a
  ld d,a
.bitloop:
  ; 1 is $10 $30; 0 is $20 $30
  ld a,$10
  jr c, .bitIs1
    add a,a
  .bitIs1:
  ldh [rP1],a
  ld a,$30
  ldh [rP1],a

  ldh a, [rIE]  ; burn 3 cycles so the ICD2 can keep up

  srl d  ; Send bits until all bits have been shifted out of D
  jr nz,.bitloop
  dec b
  jr nz,.byteloop

  ; Send $20 $30 as end of packet
  ld a,$20
  ldh [rP1],a
  ld a,$30
  ldh [rP1],a
  ret

pakswap_wram_RUN_end:
endl

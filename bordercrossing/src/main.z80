;
; Border Crossing: a Super Game Boy border injector
;
; Copyright 2022 Damian Yerrick
; 
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"

section "HVARS", HRAM
hInitialA: ds 1
hCapability:: ds 1

section "WVARS", WRAM0
wStack: ds 64
wStackEnd:
help_line_buffer:: ds 32

section "HEADER", ROM0[$100]
  nop
  jp reset
  ds 76, $00

section "RESET", ROM0
reset:
  di
  xor $11
  cp 1  ; CF set for GBC only
  ld sp, wStackEnd
  ld a, 0  ; save flags for hCapability write
  ldh [rBGP], a
  ldh [rSCX], a
  ldh [rSCY], a
  ldh [rSTAT], a
  ld [wCursorY], a
  ld [wCursorPage], a
  rra
  ldh [hCapability], a
  ld a, PADF_A|PADF_START
  ldh [hCurKeys], a
  ld a, $30
  ldh [rP1], a
  ld hl, hramcode_LOAD
  ld de, hramcode_RUN
  call memcpy_pascal16

  ; Detect VisualBoyAdvance by the fact that it calls the vblank
  ; interrupt handler even while IME is off (see di above)
  xor a
  ldh [rIF], a
  ldh [hVblanks], a
  inc a
  ldh [rIE], a
  halt
  nop
  ldh a, [hVblanks]
  or a
  jr z, .not_vba
    ld h, $7F
    call clear_scrn0_to_h
    ld hl, vba_error_msg
    jr four_lines_and_halt
  .not_vba:

  ; Wait half a second for the Super Game Boy to start responding
  call lcd_off
  ld b, 8
  :
    call sgb_wait
    dec b
    jr nz, :-
  call detect_sgb
  ldh a, [hCapability]
  cp 1
  jr z, is_sgb

  ; Error message for not SGB
  ld h, $7F
  call clear_scrn0_to_h
  ld hl, sgb_error_msg
  jr four_lines_and_halt

is_sgb:
  ld hl, bootborder
  call sgb_send_border
  call show_title_screen

.listloop:
  call listpicker

  ; Send the chosen border
  call border_list_seek_a
  inc hl
  inc hl
  ld a, [hl+]
  ld c, a
  ld a, [hl+]
  ld b, a
  ld a, [hl+]
  ld [rROMB0], a
  ld l, c
  ld h, b
  call sgb_send_border
  
  call wait_for_pakswap
  jr .listloop

  if 0
  call lcd_off
  ld h, $7F
  call clear_scrn0_to_h
  ld hl, sgb_ok_msg
  jr four_lines_and_halt
  endc

four_lines_and_halt:
  ld b, $80
  ld de, $9800 + (2 + 2*32)
  .lineloop:
    ld a, b
    push de
    call Vwf16DrawStrAt
    pop de
    ld b, a  ; ending tile ID
    
    ; move to next line of text
    ld a, 64
    add e
    ld e, a
    adc d
    sub e
    ld d, a

    ; newline or nul?
    ld a, [hl+]
    or a
    jr nz, .lineloop

  ld a, %11100100
  ldh [rBGP], a
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8800
  ldh [rLCDC], a
  ld a, [hCapability]
  rra
  call c, sgb_unfreeze
  ei
.loop:
  halt
  jr .loop

section "no sgb error txt", ROM0
sgb_error_msg:
  db 10
program_name::
  db "Border Crossing", 10
  db "requires the", 10
  db "Super Game Boy", 10
  db "accessory.", 0
vba_error_msg:
  db "Border Crossing", 10
  db "uses interrupt", 10
  db "behavior that", 10
  db "VisualBoyAdvance", 10
  db "gets wrong.  Try", 10
  db "bgb, mGBA, or a", 10
  db "Super Game Boy.", 0

; memcpy and friends ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "memset_tiny",ROM0[$08]
;;
; Writes C bytes of value A starting at HL.
memset_tiny::
  ld [hl+],a
  dec c
  jr nz,memset_tiny
  ret

section "memset_inc",ROM0
;;
; Writes C bytes of value A, A+1, ..., A+C-1 starting at HL.
memset_inc::
  ld [hl+],a
  inc a
  dec c
  jr nz,memset_inc
  ret

section "memcpy", ROM0
clear_scrn0_to_0::
  ld h, 0
clear_scrn0_to_h::
  ld de,_SCRN0
  ld bc,32*32
  ; fall through to memset

;;
; Writes BC bytes of value H starting at DE.
memset::
  ; Increment B if C is nonzero
  dec bc
  inc b
  inc c
  ld a, h
.loop:
  ld [de],a
  inc de
  dec c
  jr nz,.loop
  dec b
  jr nz,.loop
  ret

;;
; Copy a string preceded by a 2-byte length from HL to DE.
; @param HL source address
; @param DE destination address
memcpy_pascal16::
  ld a, [hl+]
  ld c, a
  ld a, [hl+]
  ld b, a
  ; fall through to memcpy

;;
; Copies BC bytes from HL to DE.
; @return A: last byte copied; HL at end of source;
; DE at end of destination; B=C=0
memcpy::
  ; Increment B if C is nonzero
  dec bc
  inc b
  inc c
.loop:
  ld a, [hl+]
  ld [de],a
  inc de
  dec c
  jr nz,.loop
  dec b
  jr nz,.loop
  ret

section "HRAMCODE_src", ROM0
;;
; The routine gets copied to high RAM.  While OAM DMA is running,
; both ROM and WRAM are inaccessible; only HRAM is readable.
; But unlike on the NES, the CPU continues to fetch and execute
; instructions.  So a program needs to run 160 mcycles' worth of
; code from HRAM until this finishes.  To present a display list,
; the program calls run_dma.
hramcode_LOAD:
  dw hramcode_RUN_end-hramcode_RUN
load "HRAMCODE", HRAM
hramcode_RUN:

run_dma::
  ld a,SOAM >> 8
  ldh [rDMA],a
hram_wait160::
  ld a,40
.loop:
  dec a
  jr nz,.loop
  ret

hramcode_RUN_end:
endl

section "borderdata", ROM0
bootborder: incbin "obj/gb/bootborder.border"

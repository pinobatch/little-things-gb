section "main", ROM0

main::
  call puts_inline
  db "Watch this space for\n"
  db "demos of SM83 math\n"
  db "subroutines\n",0
  ld hl, 54321
  call print_hl_decimal
  call puts_inline
  db "... Go!\n",0

  ld hl, 3131
  call sqrt_test
  ld hl, 3136
  call sqrt_test

  rst 0

sqrt_test:
  push hl
  call puts_inline
  db "Square root of ", 0
  pop hl
  push hl
  call print_hl_decimal
  call puts_inline
  db "\n is ", 0
  pop hl
  call sqrt
  ld l, d
  ld h, 0
  call print_hl_decimal
  ld e, "\n"
  ld c, 2
  jp bdos

puts_inline_loop:
  ld e, a
  ld c, 2
  call bdos
;;
; Prints the NUL-terminated string at PC then advances PC past it
puts_inline:
  pop hl
  ld a, [hl+]
  push hl
  or a
  jr nz, puts_inline_loop
  ret

; Decimal number printing ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

print_hl_decimal:
  call bcd16
  ld a, c
  and $0F
  call nz, nibblea
  ld a, d
  and $F0
  or c
  call nz, highnibblea
  ld a, d
  or c
  ld c, a
  ld a, d
  call nz, nibblea
  ld a, e
  and $F0
  or c
  ld a, e
  call nz, highnibblea
  ld a, e
  jr nibblea
highnibblea:
  swap a
nibblea:
  push bc
  push de
  and $0F
  or $30
  ld e, a
  ld c, 2
  call bdos
  pop de
  pop bc
  ret

bcd16:
  ; Bits 15-13: Just shift left into A (12 c)
  xor a
  ld d,a
  ld c,a
  add hl,hl
  adc a
  add hl,hl
  adc a
  add hl,hl
  adc a

  ; Bits 12-8: Shift left into A and DAA (33 c)
  ld b,4
.l1:
  add hl,hl
  adc a
  daa
  dec b
  jr nz,.l1

  ; Bits 7-0: Shift left into E, DAA, into D, DAA, into C (76 c)
  ld e,a
  rl d
  ld b,9
.l2:
  add hl,hl
  ld a,e
  adc a
  daa
  ld e,a
  ld a,d
  adc a
  daa
  ld d,a
  rl c
  dec b
  jr nz,.l2

  ret

; Math routines ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;
; Sets D to the square root of HL, leaving the remainder in CF:E
; Adaptation of http://6502org.wikidot.com/software-math-sqrt
sqrt:
  ; b: iterations left
  ; d: root
  ; e: remainder
  ; h: number high
  ; l: number low
  ld de, 0
  ld b, 8
  .loop:
    ld a, h
    sub $40
    ld c, a  ; C: trial subtraction result
    ld a, e
    sbc d
    jr c, .no_store
      ld h, c
      ld e, a
    .no_store:
    ccf
    rl d
    add hl, hl
    rl e
    add hl, hl
    rl e
    dec b
    jr nz, .loop
  ret

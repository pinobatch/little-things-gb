section "main", ROM0

main::
  call puts_inline
  db "Watch this space for\n"
  db "demos of SM83 math\n"
  db "subroutines\n",0
  ld hl, 54321
  call print_hl_decimal
  call puts_inline
  db "... Go!\n",0

  ld hl, 3131
  call sqrt_test
  ld hl, 3136
  call sqrt_test
  call pause_with_prompt

  ld a, 3
  ld de, 11669
  ld hl, 123*256+45
  call mul_test

  rst 0

pause_with_prompt:
  call puts_inline
  db "Press a key ",0
  ld c, 1  ; getc
  call bdos
  ld l, a
  ld h, 0
  jr print_hl_decimal_nl

sqrt_test:
  push hl
  call puts_inline
  db "Square root of ", 0
  pop hl
  push hl
  call print_hl_decimal
  call puts_inline
  db "\n is ", 0
  pop hl
  call sqrt
  ld l, d
  ld h, 0
print_hl_decimal_nl:
  call print_hl_decimal
  ld e, '\n'
  ld c, 2
  jp bdos

mul_test:
  push hl

  ; Test A*DE
  push de
  push af
  ld h, d
  ld l, e
  call print_hl_decimal
  call puts_inline
  db " times ",0
  pop af
  push af
  ld l, a
  ld h, 0
  call print_hl_decimal
  call puts_inline
  db "\n is ",0
  pop af
  pop de
  call mul_a_de
  call print_hl_decimal_nl

  ; Test again, H*L
  pop hl
  push hl
  ld l, h
  ld h, 0
  call print_hl_decimal
  call puts_inline
  db " times ",0
  pop hl
  push hl
  ld h, 0
  call print_hl_decimal
  call puts_inline
  db "\n is ",0
  pop hl
  ld e, l
  call mul_h_e
  jr print_hl_decimal_nl

puts_inline_loop:
  ld e, a
  ld c, 2
  call bdos
;;
; Prints the NUL-terminated string at PC then advances PC past it
puts_inline:
  pop hl
  ld a, [hl+]
  push hl
  or a
  jr nz, puts_inline_loop
  ret

; Decimal number printing ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

print_hl_decimal:
  call bcd16
  ld a, c
  and $0F
  call nz, nibblea
  ld a, d
  and $F0
  or c
  call nz, highnibblea
  ld a, d
  or c
  ld c, a
  ld a, d
  call nz, nibblea
  ld a, e
  and $F0
  or c
  ld a, e
  call nz, highnibblea
  ld a, e
  jr nibblea
highnibblea:
  swap a
nibblea:
  push bc
  push de
  and $0F
  or $30
  ld e, a
  ld c, 2
  call bdos
  pop de
  pop bc
  ret

;;
; Converts a 16-bit number from binary to decimal in about
; 200 cycles.
; @param HL the number
; @return C: digit in myriads place; D: digits in thousands and
; hundreds places; E: digits in tens and ones places; AB trashed
bcd16:
  ; Bits 15-13: Just shift left into A (12 c)
  xor a
  ld d,a
  ld c,a
  add hl,hl
  adc a
  add hl,hl
  adc a
  add hl,hl
  adc a

  ; Bits 12-9: Shift left into A and DAA (33 c)
  ld b,4
.l1:
  add hl,hl
  adc a
  daa
  dec b
  jr nz,.l1

  ; Bits 8-0: Shift left into E, DAA, into D, DAA, into C (139 c)
  ld e,a
  rl d
  ld b,9
.l2:
  add hl,hl
  ld a,e
  adc a
  daa
  ld e,a
  ld a,d
  adc a
  daa
  ld d,a
  rl c
  dec b
  jr nz,.l2

  ret

; Math routines ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;
; Sets D to the square root of HL, leaving the remainder in CF:E
; Adaptation of http://6502org.wikidot.com/software-math-sqrt
sqrt:
  ; b: iterations left
  ; d: root
  ; e: remainder
  ; h: number high
  ; l: number low
  ld de, 0
  ld b, 8
  .loop:
    ld a, h
    sub $40
    ld c, a  ; C: trial subtraction result
    ld a, e
    sbc d
    jr c, .no_store
      ld h, c
      ld e, a
    .no_store:
    ccf
    rl d
    add hl, hl
    rl e
    add hl, hl
    rl e
    dec b
    jr nz, .loop
  ret

;;
; Multiplies E by H putting result in HL; preserves ACE
mul_h_e:
  ld b, 8
  ld l, 0
  ld d, l
  .loop:
    add hl, hl
    jr nc, .noadd
      add hl, de
    .noadd:
    dec b
    jr nz, .loop
  ret

;;
; Multiplies A by DE putting result in HL; preserves BCDE
mul_a_de:
  ld hl, 0
  scf
  adc a
  jr c, .firstwas80
  .loop:
    add hl, hl
    add a
    jr nc, .noadd
    .firstwas80:
      add hl, de
    .noadd:
    cp $80
    jr nz, .loop
  ret

;;
; Divides HL by D putting result in HL and remainder in A; preserves CE
div_hl_d:
  xor a
  ld b,16
  .loop:
    add hl, hl  ; AHL acts as a 24-bit value
    adc a
    ; If CF:A is at least D, subtract
    jr c, .yes_subtract
    cp d
    jr c, .no_subtract
    .yes_subtract:
      sub d
      inc l  ; increase the quotient
    .no_subtract:
    dec b
    jr nz, .loop
  ret

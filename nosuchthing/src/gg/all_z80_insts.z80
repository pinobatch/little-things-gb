; Test every nonredundant instruction in the Z80
; ca65 -l lst.txt -o /dev/null all_z80_insts.z80 && less lst.txt

.include "z80isa.mac"

.code
prevlabel:

  ; $00-$0F
  nop
  ld bc, $1010
  ld [bc], a
  inc bc
  inc b
  dec b
  ld b, $60
  rlca
  ex af
  add hl, bc
  ld a, [bc]
  dec bc
  inc c
  dec c
  ld c, $E0
  rrca

  ; $10-$1F
  djnz *+2+$01
  ld de, $1111
  ld [de], a
  inc de
  inc d
  dec d
  ld d, $61
  rla
  jr *+2-$7F
  add hl, de
  ld a, [de]
  dec de
  inc e
  dec e
  ld e, $E1
  rra

  ; $20-$2F
  jr nz, *+2+$02
  ld hl, $1212
  ld [$2222], hl
  inc hl
  inc h
  dec h
  ld h, $62
  daa
  jr z, *+2-$7E
  add hl, hl
  ld hl, [$2A2A]
  dec hl
  inc l
  dec l
  ld l, $E2
  cpl

  ; $30-$3F
  jr nc, *+2+$03
  ld sp, $1313
  ld [$2323], a
  inc sp
  inc [hl]
  dec [hl]
  ld [hl], $63
  scf
  jr c, *+2-$7D
  add hl, sp
  ld a, [$A3A3]
  dec sp
  inc a
  dec a
  ld a, $E3
  ccf

  ; $40-$4F
  ld b, b
  ld b, c
  ld b, d
  ld b, e
  ld b, h
  ld b, l
  ld b, [hl]
  ld b, a
  ld c, b
  ld c, c
  ld c, d
  ld c, e
  ld c, h
  ld c, l
  ld c, [hl]
  ld c, a

  ; $50-$5F
  ld d, b
  ld d, c
  ld d, d
  ld d, e
  ld d, h
  ld d, l
  ld d, [hl]
  ld d, a
  ld e, b
  ld e, c
  ld e, d
  ld e, e
  ld e, h
  ld e, l
  ld e, [hl]
  ld e, a

  ; $60-$6F
  ld h, b
  ld h, c
  ld h, d
  ld h, e
  ld h, h
  ld h, l
  ld h, [hl]
  ld h, a
  ld l, b
  ld l, c
  ld l, d
  ld l, e
  ld l, h
  ld l, l
  ld l, [hl]
  ld l, a

  ; $70-$7F
  ld [hl], b
  ld [hl], c
  ld [hl], d
  ld [hl], e
  ld [hl], h
  ld [hl], l
  halt
  ld [hl], a
  ld a, b
  ld a, c
  ld a, d
  ld a, e
  ld a, h
  ld a, l
  ld a, [hl]
  ld a, a

  add a, b
  add a, c
  add a, d
  add a, e
  add a, h
  add a, l
  add a, [hl]
  add a, a
  adc a, b
  adc a, c
  adc a, d
  adc a, e
  adc a, h
  adc a, l
  adc a, [hl]
  adc a, a

  sub a, b
  sub a, c
  sub a, d
  sub a, e
  sub a, h
  sub a, l
  sub a, [hl]
  sub a, a
  sbc a, b
  sbc a, c
  sbc a, d
  sbc a, e
  sbc a, h
  sbc a, l
  sbc a, [hl]
  sbc a, a

  and a, b
  and a, c
  and a, d
  and a, e
  and a, h
  and a, l
  and a, [hl]
  and a, a
  xor a, b
  xor a, c
  xor a, d
  xor a, e
  xor a, h
  xor a, l
  xor a, [hl]
  xor a, a

  or a, b
  or a, c
  or a, d
  or a, e
  or a, h
  or a, l
  or a, [hl]
  or a, a
  cp a, b
  cp a, c
  cp a, d
  cp a, e
  cp a, h
  cp a, l
  cp a, [hl]
  cp a, a

  ; $C0-$CF
  ret nz
  pop bc
  jp nz, $2C2C
  jp $3C3C
  call nz, $4C4C
  push bc
  add a, $6C
  rst $0000
  ret z
  ret
  jp z, $ACAC
  ; res 7, h  - will be implemented at CB time
  call z, $CCCC
  call $DCDC
  adc a, $EC
  rst $0008

  ; $D0-$DF
  ret nc
  pop de
  jp nc, $2D2D
  out [$3D], a
  call nc, $4D4D
  push de
  sub a, $6D
  rst $0010
  ret c
  exx
  jp c, $ADAD
  in a, [$BD]
  call c, $CDCD
  ; skip DD: IX prefix
  sbc a, $ED
  rst $18

  ; $E0-$EF
  ret po
  pop hl
  jp po, $2E2E
  ex [sp], hl
  call po, $4E4E
  push hl
  and a, $6E
  rst $0020
  ret pe
  jp hl
  jp pe, $AEAE
  ex de, hl
  call pe, $CECE
  ; skip ED: Extended prefix
  xor a, $EE
  rst $28

  ; $F0-$FF
  ret p
  pop af
  jp p, $2F2F
  di
  call p, $4F4F
  push af
  or a, $6F
  rst $30
  ret m
  ld sp, hl
  jp m, $AFAF
  ei
  call m, $CFCF
  ; skip FD: IY prefix
  cp a, $EF
  rst $38

; PREFIX CB ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ; $CB00-$CB0F
  rlc b
  rlc c
  rlc d
  rlc e
  rlc h
  rlc l
  rlc [hl]
  rlc a
  rrc b
  rrc c
  rrc d
  rrc e
  rrc h
  rrc l
  rrc [hl]
  rrc a

  ; $CB10-$CB1F
  rl b
  rl c
  rl d
  rl e
  rl h
  rl l
  rl [hl]
  rl a
  rr b
  rr c
  rr d
  rr e
  rr h
  rr l
  rr [hl]
  rr a

  ; $CB20-$CB2F
  sla b
  sla c
  sla d
  sla e
  sla h
  sla l
  sla [hl]
  sla a
  sra b
  sra c
  sra d
  sra e
  sra h
  sra l
  sra [hl]
  sra a

  ; $CB30-$CB3F
  sll b
  sll c
  sll d
  sll e
  sll h
  sll l
  sll [hl]
  sll a
  srl b
  srl c
  srl d
  srl e
  srl h
  srl l
  srl [hl]
  srl a

  ; Bit test

  ; $CB40-$CB4F
  bit 0, b
  bit 0, c
  bit 0, d
  bit 0, e
  bit 0, h
  bit 0, l
  bit 0, [hl]
  bit 0, a
  bit 1, b
  bit 1, c
  bit 1, d
  bit 1, e
  bit 1, h
  bit 1, l
  bit 1, [hl]
  bit 1, a

  ; $CB50-$CB5F
  bit 2, b
  bit 2, c
  bit 2, d
  bit 2, e
  bit 2, h
  bit 2, l
  bit 2, [hl]
  bit 2, a
  bit 3, b
  bit 3, c
  bit 3, d
  bit 3, e
  bit 3, h
  bit 3, l
  bit 3, [hl]
  bit 3, a

  ; $CB60-$CB6F
  bit 4, b
  bit 4, c
  bit 4, d
  bit 4, e
  bit 4, h
  bit 4, l
  bit 4, [hl]
  bit 4, a
  bit 5, b
  bit 5, c
  bit 5, d
  bit 5, e
  bit 5, h
  bit 5, l
  bit 5, [hl]
  bit 5, a

  ; $CB70-$CB7F
  bit 6, b
  bit 6, c
  bit 6, d
  bit 6, e
  bit 6, h
  bit 6, l
  bit 6, [hl]
  bit 6, a
  bit 7, b
  bit 7, c
  bit 7, d
  bit 7, e
  bit 7, h
  bit 7, l
  bit 7, [hl]
  bit 7, a

  ; Bit clear

  ; $CB80-$CB8F
  res 0, b
  res 0, c
  res 0, d
  res 0, e
  res 0, h
  res 0, l
  res 0, [hl]
  res 0, a
  res 1, b
  res 1, c
  res 1, d
  res 1, e
  res 1, h
  res 1, l
  res 1, [hl]
  res 1, a

  ; $CB90-$CB9F
  res 2, b
  res 2, c
  res 2, d
  res 2, e
  res 2, h
  res 2, l
  res 2, [hl]
  res 2, a
  res 3, b
  res 3, c
  res 3, d
  res 3, e
  res 3, h
  res 3, l
  res 3, [hl]
  res 3, a

  ; $CBA0-$CBAF
  res 4, b
  res 4, c
  res 4, d
  res 4, e
  res 4, h
  res 4, l
  res 4, [hl]
  res 4, a
  res 5, b
  res 5, c
  res 5, d
  res 5, e
  res 5, h
  res 5, l
  res 5, [hl]
  res 5, a

  ; $CBB0-$CBBF
  res 6, b
  res 6, c
  res 6, d
  res 6, e
  res 6, h
  res 6, l
  res 6, [hl]
  res 6, a
  res 7, b
  res 7, c
  res 7, d
  res 7, e
  res 7, h
  res 7, l
  res 7, [hl]
  res 7, a

  ; Bit set
  
  ; $CBC0-$CBCF
  set 0, b
  set 0, c
  set 0, d
  set 0, e
  set 0, h
  set 0, l
  set 0, [hl]
  set 0, a
  set 1, b
  set 1, c
  set 1, d
  set 1, e
  set 1, h
  set 1, l
  set 1, [hl]
  set 1, a

  ; $CBD0-$CBDF
  set 2, b
  set 2, c
  set 2, d
  set 2, e
  set 2, h
  set 2, l
  set 2, [hl]
  set 2, a
  set 3, b
  set 3, c
  set 3, d
  set 3, e
  set 3, h
  set 3, l
  set 3, [hl]
  set 3, a

  ; $CBE0-$CBEF
  set 4, b
  set 4, c
  set 4, d
  set 4, e
  set 4, h
  set 4, l
  set 4, [hl]
  set 4, a
  set 5, b
  set 5, c
  set 5, d
  set 5, e
  set 5, h
  set 5, l
  set 5, [hl]
  set 5, a

  ; $CBF0-$CBFF
  set 6, b
  set 6, c
  set 6, d
  set 6, e
  set 6, h
  set 6, l
  set 6, [hl]
  set 6, a
  set 7, b
  set 7, c
  set 7, d
  set 7, e
  set 7, h
  set 7, l
  set 7, [hl]
  set 7, a

; PREFIX DD ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ; $DD00-$DD1F
  add ix, bc
  add ix, de

  ; $DD20-DD3F
  ld ix,$DD12
  ld [$DD22], ix
  inc ix
  inc ixh
  dec ixh
  ld ixh, $62
  add ix, ix
  ld ix, [$DDA2]
  dec ix
  inc ixl
  dec ixl
  ld ixl, $E2

  inc [ix]
  inc [ix+$43]
  dec [ix]
  dec [ix+$53]
  ld [ix], $DD
  ld [ix+$63], $DD
  add ix, sp

  ld b, ixh
  ld b, ixl
  ld b, [ix]
  ld b, [ix+$64]
  ld b, [ix-$23]
  ld c, ixh
  ld c, ixl
  ld c, [ix]
  ld c, [ix+$11]
  ld c, [ix-$23]

  ld d, ixh
  ld d, ixl
  ld d, [ix]
  ld d, [ix+$65]
  ld d, [ix-$23]
  ld e, ixh
  ld e, ixl
  ld e, [ix]
  ld e, [ix+$11]
  ld e, [ix-$23]

  ld ixh, b
  ld ixh, c
  ld ixh, d
  ld ixh, e
  ld ixh, ixh
  ld ixh, ixl
  ld h, [ix]
  ld h, [ix+$66]
  ld h, [ix-$13]
  ld ixh, a
  ld ixl, b
  ld ixl, c
  ld ixl, d
  ld ixl, e
  ld ixl, ixh
  ld ixl, ixl
  ld l, [ix]
  ld l, [ix+$11]
  ld l, [ix-$1A]
  ld ixl, a

  ld [ix+$07], b
  ld [ix-$23], b
  ld [ix+$17], c
  ld [ix-$23], c
  ld [ix+$27], d
  ld [ix-$23], d
  ld [ix+$37], e
  ld [ix-$23], e
  ld [ix+$47], h
  ld [ix-$23], h
  ld [ix+$57], l
  ld [ix-$23], l
  ld [ix+$77], a
  ld [ix-$23], a
  ld a, ixh
  ld a, ixl
  ld a, [ix]
  ld a, [ix+$11]
  ld a, [ix-$23]

  add a, ixh
  add a, ixl
  add a, [ix]
  add a, [ix+$11]
  add a, [ix-$7A]
  adc a, ixh
  adc a, ixl
  adc a, [ix]
  adc a, [ix+$11]
  adc a, [ix-$72]

  sub a, ixh
  sub a, ixl
  sub a, [ix]
  sub a, [ix+$11]
  sub a, [ix-$6A]
  sbc a, ixh
  sbc a, ixl
  sbc a, [ix]
  sbc a, [ix+$11]
  sbc a, [ix-$62]

  and a, ixh
  and a, ixl
  and a, [ix]
  and a, [ix+$11]
  and a, [ix-$5A]
  xor a, ixh
  xor a, ixl
  xor a, [ix]
  xor a, [ix+$11]
  xor a, [ix-$52]

  or a, ixh
  or a, ixl
  or a, [ix]
  or a, [ix+$11]
  or a, [ix-$4A]
  cp a, ixh
  cp a, ixl
  cp a, [ix]
  cp a, [ix+$11]
  cp a, [ix-$42]

  pop ix
  ex [sp],ix
  push ix
  jp ix
  ld sp, ix

  rlc [ix+$60]
  rrc [ix-$20]
  rl [ix+$61]
  rr [ix-$1F]
  sla [ix]
  sla [ix+$62]
  sra [ix]
  sra [ix-$1E]
  sll [ix+$63]
  srl [ix-$1D]
  bit 0, [ix+$64]
  bit 1, [ix-$1C]
  bit 2, [ix+$65]
  bit 3, [ix-$1B]
  bit 4, [ix+$66]
  bit 5, [ix-$1A]
  bit 6, [ix+$67]
  bit 7, [ix-$19]
  bit 7, [ix]
  res 0, [ix+$68]
  res 1, [ix-$18]
  res 2, [ix+$69]
  res 3, [ix-$17]
  res 4, [ix+$6A]
  res 5, [ix-$16]
  res 6, [ix+$6B]
  res 7, [ix-$15]
  res 7, [ix]
  set 0, [ix+$6C]
  set 1, [ix-$14]
  set 2, [ix+$6D]
  set 3, [ix-$13]
  set 4, [ix+$6E]
  set 5, [ix-$12]
  set 6, [ix+$6F]
  set 7, [ix-$11]
  set 7, [ix]

; PREFIX ED ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;$ED40
  in b, [c]
  out [c], b
  sbc hl, bc
  ld [$DE34], bc
  neg
  retn
  im 0
  ld i, a
  in c, [c]
  out [c], c
  adc hl, bc
  ld bc, [$DEB4]
  reti
  ld r, a

  ;$ED50
  in d, [c]
  out [c], d
  sbc hl, de
  ld [$DE35], de
  im 1
  ld a, i
  in e, [c]
  out [c], e
  adc hl, de
  ld de, [$DEB5]
  im 2
  ld a, r

  ; $ED60
  in h, [c]
  out [c], h
  sbc hl, hl
  rrd
  in l, [c]
  out [c], l
  adc hl, hl
  rld
  
  ; $ED70
  sbc hl, sp
  ld [$DE37], sp
  in a, [c]
  out [c], a
  adc hl, sp
  ld sp, [$DEB7]

  ; $EDA0
  ldi
  cpi
  ini
  outi
  ldd
  cpd
  ind
  outd

  ; $EDB0
  ldir
  cpir
  inir
  otir
  lddr
  cpdr
  indr
  otdr

; PREFIX FD ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ; $DD00-$DD1F
  add iy, bc
  add iy, de

  ; $DD20-DD3F
  ld iy,$DD12
  ld [$DD22], iy
  inc iy
  inc iyh
  dec iyh
  ld iyh, $62
  add iy, iy
  ld iy, [$DDA2]
  dec iy
  inc iyl
  dec iyl
  ld iyl, $E2

  inc [iy]
  inc [iy+$43]
  dec [iy]
  dec [iy+$53]
  ld [iy], $DF
  ld [iy+$63], $DF
  add iy, sp

  ld b, iyh
  ld b, iyl
  ld b, [iy]
  ld b, [iy+$64]
  ld b, [iy-3]
  ld c, iyh
  ld c, iyl
  ld c, [iy]
  ld c, [iy+$11]
  ld c, [iy-3]

  ld d, iyh
  ld d, iyl
  ld d, [iy]
  ld d, [iy+$65]
  ld d, [iy-3]
  ld e, iyh
  ld e, iyl
  ld e, [iy]
  ld e, [iy+$11]
  ld e, [iy-3]

  ld iyh, b
  ld iyh, c
  ld iyh, d
  ld iyh, e
  ld iyh, iyh
  ld iyh, iyl
  ld h, [iy]
  ld h, [iy+$66]
  ld h, [iy-$13]
  ld iyh, a
  ld iyl, b
  ld iyl, c
  ld iyl, d
  ld iyl, e
  ld iyl, iyh
  ld iyl, iyl
  ld l, [iy]
  ld l, [iy+$11]
  ld l, [iy-$1A]
  ld iyl, a

  ld [iy], b
  ld [iy+$07], b
  ld [iy-3], b
  ld [iy], c
  ld [iy+$17], c
  ld [iy-3], c
  ld [iy], d
  ld [iy+$27], d
  ld [iy-3], d
  ld [iy], e
  ld [iy+$37], e
  ld [iy-3], e
  ld [iy], h
  ld [iy+$47], h
  ld [iy-3], h
  ld [iy], l
  ld [iy+$57], l
  ld [iy-3], l
  ld [iy], a
  ld [iy+$77], a
  ld [iy-3], a
  ld a, iyh
  ld a, iyl
  ld a, [iy]
  ld a, [iy+$11]
  ld a, [iy-3]

  add a, iyh
  add a, iyl
  add a, [iy]
  add a, [iy+$11]
  add a, [iy-$7A]
  adc a, iyh
  adc a, iyl
  adc a, [iy]
  adc a, [iy+$11]
  adc a, [iy-$72]

  sub a, iyh
  sub a, iyl
  sub a, [iy]
  sub a, [iy+$11]
  sub a, [iy-$6A]
  sbc a, iyh
  sbc a, iyl
  sbc a, [iy]
  sbc a, [iy+$11]
  sbc a, [iy-$62]

  and a, iyh
  and a, iyl
  and a, [iy]
  and a, [iy+$11]
  and a, [iy-$5A]
  xor a, iyh
  xor a, iyl
  xor a, [iy]
  xor a, [iy+$11]
  xor a, [iy-$52]

  or a, iyh
  or a, iyl
  or a, [iy]
  or a, [iy+$11]
  or a, [iy-$4A]
  cp a, iyh
  cp a, iyl
  cp a, [iy]
  cp a, [iy+$11]
  cp a, [iy-$42]

  pop iy
  ex [sp],iy
  push iy
  jp iy
  ld sp, iy

  rlc [iy]
  rlc [iy+$60]
  rrc [iy]
  rrc [iy-$20]
  rl [iy+$61]
  rr [iy-$1F]
  sla [iy+$62]
  sra [iy-$1E]
  sll [iy+$63]
  srl [iy-$1D]
  bit 0, [iy]
  bit 0, [iy+$64]
  bit 1, [iy-$1C]
  bit 2, [iy+$65]
  bit 3, [iy-$1B]
  bit 4, [iy+$66]
  bit 5, [iy-$1A]
  bit 6, [iy+$67]
  bit 7, [iy-$19]
  res 0, [iy]
  res 0, [iy+$68]
  res 1, [iy-$18]
  res 2, [iy+$69]
  res 3, [iy-$17]
  res 4, [iy+$6A]
  res 5, [iy-$16]
  res 6, [iy+$6B]
  res 7, [iy-$15]
  set 0, [iy]
  set 0, [iy+$6C]
  set 1, [iy-$14]
  set 2, [iy+$6D]
  set 3, [iy-$13]
  set 4, [iy+$6E]
  set 5, [iy-$12]
  set 6, [iy+$6F]
  set 7, [iy-$11]

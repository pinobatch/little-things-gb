;*
;* Gameboy Hardware definitions
;*
;* Based on Jones' hardware.inc
;* And based on Carsten Sorensen's ideas.
;*
;* Rev 1.1 - 15-Jul-97 : Added define check
;* Rev 1.2 - 18-Jul-97 : Added revision check macro
;* Rev 1.3 - 19-Jul-97 : Modified for RGBASM V1.05
;* Rev 1.4 - 27-Jul-97 : Modified for new subroutine prefixes
;* Rev 1.5 - 15-Aug-97 : Added _HRAM, PAD, CART defines
;*                     :  and Nintendo Logo
;* Rev 1.6 - 30-Nov-97 : Added rDIV, rTIMA, rTMA, & rTAC
;* Rev 1.7 - 31-Jan-98 : Added _SCRN0, _SCRN1
;* Rev 1.8 - 15-Feb-98 : Added rSB, rSC
;* Rev 1.9 - 16-Feb-98 : Converted I/O registers to $FFXX format
;* Rev 2.0 -           : Added GBC registers
;* Rev 2.1 -           : Added MBC5 & cart RAM enable/disable defines
;* Rev 2.2 -           : Fixed NR42,NR43, & NR44 equates
;* Rev 2.3 -           : Fixed incorrect _HRAM equate
;* Rev 2.4 - 27-Apr-13 : Added some cart defines (AntonioND)
;* Rev 2.5 - 03-May-15 : Fixed format (AntonioND)
;* Rev 2.6 - 09-Apr-16 : Added GBC OAM and cart defines (AntonioND)

; If all of these are already defined, don't do it again.

.ifndef HARDWARE_INC
.define HARDWARE_INC 1

_HW          = $FF00

_VRAM        = $8000 ; $8000->$9FFF
_SCRN0       = $9800 ; $9800->$9BFF
_SCRN1       = $9C00 ; $9C00->$9FFF
_SRAM        = $A000 ; $A000->$BFFF
_RAM         = $C000 ; $C000->$DFFF
_OAMRAM      = $FE00 ; $FE00->$FE9F
_AUD3WAVERAM = $FF30 ; $FF30->$FF3F
_HRAM        = $FF80 ; $FF80->$FFFE

; *** MBC5 Equates ***

rRAMG        = $0000 ; $0000->$1fff
rROMB0       = $2000 ; $2000->$2fff
rROMB1       = $3000 ; $3000->$3fff - If more than 256 ROM banks are present.
rRAMB        = $4000 ; $4000->$5fff - Bit 3 enables rumble (if present)


; --
; -- OAM flags
; --

OAMF_PRI        = %10000000 ; Priority
OAMF_YFLIP      = %01000000 ; Y flip
OAMF_XFLIP      = %00100000 ; X flip
OAMF_PAL0       = %00000000 ; Palette number; 0,1 (DMG)
OAMF_PAL1       = %00010000 ; Palette number; 0,1 (DMG)
OAMF_BANK0      = %00000000 ; Bank number; 0,1 (GBC)
OAMF_BANK1      = %00001000 ; Bank number; 0,1 (GBC)

OAMF_PALMASK    = %00000111 ; Palette (GBC)

OAMB_PRI        = 7 ; Priority 
OAMB_YFLIP      = 6 ; Y flip 
OAMB_XFLIP      = 5 ; X flip 
OAMB_PAL1       = 4 ; Palette number; 0,1 (DMG) 
OAMB_BANK1      = 3 ; Bank number; 0,1 (GBC) 


;***************************************************************************
;*
;* Custom registers
;*
;***************************************************************************

; --
; -- P1 ($FF00)
; -- Register for reading joy pad info.    (R/W)
; --
rP1 = $FF00

P1F_5 = %00100000 ; P15 out port
P1F_4 = %00010000 ; P14 out port
P1F_3 = %00001000 ; P13 in port
P1F_2 = %00000100 ; P12 in port
P1F_1 = %00000010 ; P11 in port
P1F_0 = %00000001 ; P10 in port

; --
; -- SB ($FF01)
; -- Serial Transfer Data (R/W)
; --
rSB = $FF01

; --
; -- SC ($FF02)
; -- Serial I/O Control (R/W)
; --
rSC = $FF02

; --
; -- DIV ($FF04)
; -- Divider register (R/W)
; --
rDIV = $FF04


; --
; -- TIMA ($FF05)
; -- Timer counter (R/W)
; --
rTIMA = $FF05


; --
; -- TMA ($FF06)
; -- Timer modulo (R/W)
; --
rTMA = $FF06


; --
; -- TAC ($FF07)
; -- Timer control (R/W)
; --
rTAC = $FF07

TACF_START  = %00000100
TACF_STOP   = %00000000
TACF_4KHZ   = %00000000
TACF_16KHZ  = %00000011
TACF_65KHZ  = %00000010
TACF_262KHZ = %00000001

; --
; -- IF ($FF0F)
; -- Interrupt Flag (R/W)
; --
rIF = $FF0F

; --
; -- LCDC ($FF40)
; -- LCD Control (R/W)
; --
rLCDC = $FF40

LCDCF_OFF     = %00000000 ; LCD Control Operation
LCDCF_ON      = %10000000 ; LCD Control Operation
LCDCF_WIN9800 = %00000000 ; Window Tile Map Display Select
LCDCF_WIN9C00 = %01000000 ; Window Tile Map Display Select
LCDCF_WINOFF  = %00000000 ; Window Display
LCDCF_WINON   = %00100000 ; Window Display
LCDCF_BG8800  = %00000000 ; BG & Window Tile Data Select
LCDCF_BG8000  = %00010000 ; BG & Window Tile Data Select
LCDCF_BG9800  = %00000000 ; BG Tile Map Display Select
LCDCF_BG9C00  = %00001000 ; BG Tile Map Display Select
LCDCF_OBJ8    = %00000000 ; OBJ Construction
LCDCF_OBJ16   = %00000100 ; OBJ Construction
LCDCF_OBJOFF  = %00000000 ; OBJ Display
LCDCF_OBJON   = %00000010 ; OBJ Display
LCDCF_BGOFF   = %00000000 ; BG Display
LCDCF_BGON    = %00000001 ; BG Display
; "Window Character Data Select" follows BG


; --
; -- STAT ($FF41)
; -- LCDC Status   (R/W)
; --
rSTAT = $FF41

STATF_LYC     =  %01000000 ; LYCEQULY Coincidence (Selectable)
STATF_MODE10  =  %00100000 ; Mode 10
STATF_MODE01  =  %00010000 ; Mode 01 (V-Blank)
STATF_MODE00  =  %00001000 ; Mode 00 (H-Blank)
STATF_LYCF    =  %00000100 ; Coincidence Flag
STATF_HB      =  %00000000 ; H-Blank
STATF_VB      =  %00000001 ; V-Blank
STATF_OAM     =  %00000010 ; OAM-RAM is used by system
STATF_LCD     =  %00000011 ; Both OAM and VRAM used by system
STATF_BUSY    =  %00000010 ; When set, VRAM access is unsafe


; --
; -- SCY ($FF42)
; -- Scroll Y (R/W)
; --
rSCY = $FF42


; --
; -- SCY ($FF43)
; -- Scroll X (R/W)
; --
rSCX = $FF43


; --
; -- LY ($FF44)
; -- LCDC Y-Coordinate (R)
; --
; -- Values range from 0->153. 144->153 is the VBlank period.
; --
rLY = $FF44


; --
; -- LYC ($FF45)
; -- LY Compare (R/W)
; --
; -- When LYEQUEQULYC, STATF_LYCF will be set in STAT
; --
rLYC = $FF45


; --
; -- DMA ($FF46)
; -- DMA Transfer and Start Address (W)
; --
rDMA = $FF46


; --
; -- BGP ($FF47)
; -- BG Palette Data (W)
; --
; -- Bit 7-6 - Intensity for %11
; -- Bit 5-4 - Intensity for %10
; -- Bit 3-2 - Intensity for %01
; -- Bit 1-0 - Intensity for %00
; --
rBGP = $FF47


; --
; -- OBP0 ($FF48)
; -- Object Palette 0 Data (W)
; --
; -- See BGP for info
; --
rOBP0 = $FF48


; --
; -- OBP1 ($FF49)
; -- Object Palette 1 Data (W)
; --
; -- See BGP for info
; --
rOBP1 = $FF49


; --
; -- WY ($FF4A)
; -- Window Y Position (R/W)
; --
; -- 0 <= WY <= 143
; --
rWY = $FF4A


; --
; -- WX ($FF4B)
; -- Window X Position (R/W)
; --
; -- 7 <= WX <= 166
; --
rWX = $FF4B


; --
; -- KEY 1 ($FF4D)
; -- Select CPU Speed (R/W)
; --
rKEY1 = $FF4D


; --
; -- VBK ($FF4F)
; -- Select Video RAM Bank (R/W)
; --
rVBK = $FF4F


; --
; -- HDMA1 ($FF51)
; -- Horizontal Blanking, General Purpose DMA (W)
; --
rHDMA1 = $FF51


; --
; -- HDMA2 ($FF52)
; -- Horizontal Blanking, General Purpose DMA (W)
; --
rHDMA2 = $FF52


; --
; -- HDMA3 ($FF53)
; -- Horizontal Blanking, General Purpose DMA (W)
; --
rHDMA3 = $FF53


; --
; -- HDMA4 ($FF54)
; -- Horizontal Blanking, General Purpose DMA (W)
; --
rHDMA4 = $FF54


; --
; -- HDMA5 ($FF55)
; -- Horizontal Blanking, General Purpose DMA (R/W)
; --
rHDMA5 = $FF55


; --
; -- RP ($FF56)
; -- Infrared Communications Port (R/W)
; --
rRP = $FF56


; --
; -- BCPS ($FF68)
; -- Background Color Palette Specification (R/W)
; --
rBCPS = $FF68


; --
; -- BCPD ($FF69)
; -- Background Color Palette Data (R/W)
; --
rBCPD = $FF69


; --
; -- BCPS ($FF6A)
; -- Object Color Palette Specification (R/W)
; --
rOCPS = $FF6A


; --
; -- BCPD ($FF6B)
; -- Object Color Palette Data (R/W)
; --
rOCPD = $FF6B


; --
; -- SVBK ($FF4F)
; -- Select Main RAM Bank (R/W)
; --
rSVBK = $FF70


; --
; -- IE ($FFFF)
; -- Interrupt Enable (R/W)
; --
rIE = $FFFF


IEF_HILO   = %00010000 ; Transition from High to Low of Pin number P10-P13
IEF_SERIAL = %00001000 ; Serial I/O transfer end
IEF_TIMER  = %00000100 ; Timer Overflow
IEF_LCDC   = %00000010 ; LCDC (see STAT)
IEF_VBLANK = %00000001 ; V-Blank




;***************************************************************************
;*
;* Sound control registers
;*
;***************************************************************************

; --
; -- AUDVOL/NR50 ($FF24)
; -- Channel control / ON-OFF / Volume (R/W)
; --
; -- Bit 7   - Vin->SO2 ON/OFF (Vin??)
; -- Bit 6-4 - SO2 output level (volume) (# 0-7)
; -- Bit 3   - Vin->SO1 ON/OFF (Vin??)
; -- Bit 2-0 - SO1 output level (volume) (# 0-7)
; --
rNR50 = $FF24
rAUDVOL = rNR50


; --
; -- AUDTERM/NR51 ($FF25)
; -- Selection of Sound output terminal (R/W)
; --
; -- Bit 7   - Output sound 4 to SO2 terminal
; -- Bit 6   - Output sound 3 to SO2 terminal
; -- Bit 5   - Output sound 2 to SO2 terminal
; -- Bit 4   - Output sound 1 to SO2 terminal
; -- Bit 3   - Output sound 4 to SO1 terminal
; -- Bit 2   - Output sound 3 to SO1 terminal
; -- Bit 1   - Output sound 2 to SO1 terminal
; -- Bit 0   - Output sound 0 to SO1 terminal
; --
rNR51 = $FF25
rAUDTERM = rNR51


; --
; -- AUDENA/NR52 ($FF26)
; -- Sound on/off (R/W)
; --
; -- Bit 7   - All sound on/off (sets all audio regs to 0!)
; -- Bit 3   - Sound 4 ON flag (doesn't work!)
; -- Bit 2   - Sound 3 ON flag (doesn't work!)
; -- Bit 1   - Sound 2 ON flag (doesn't work!)
; -- Bit 0   - Sound 1 ON flag (doesn't work!)
; --
rNR52 = $FF26
rAUDENA = rNR52


;***************************************************************************
;*
;* SoundChannel #1 registers
;*
;***************************************************************************

; --
; -- AUD1SWEEP/NR10 ($FF10)
; -- Sweep register (R/W)
; --
; -- Bit 6-4 - Sweep Time
; -- Bit 3   - Sweep Increase/Decrease
; --           0: Addition    (frequency increases???)
; --           1: Subtraction (frequency increases???)
; -- Bit 2-0 - Number of sweep shift (# 0-7)
; -- Sweep Time: (n*7.8ms)
; --
rNR10 = $FF10
rAUD1SWEEP = rNR10


; --
; -- AUD1LEN/NR11 ($FF11)
; -- Sound length/Wave pattern duty (R/W)
; --
; -- Bit 7-6 - Wave Pattern Duty (00:12.5% 01:25% 10:50% 11:75%)
; -- Bit 5-0 - Sound length data (# 0-63)
; --
rNR11 = $FF11
rAUD1LEN = rNR11


; --
; -- AUD1ENV/NR12 ($FF12)
; -- Envelope (R/W)
; --
; -- Bit 7-4 - Initial value of envelope
; -- Bit 3   - Envelope UP/DOWN
; --           0: Decrease
; --           1: Range of increase
; -- Bit 2-0 - Number of envelope sweep (# 0-7)
; --
rNR12 = $FF12
rAUD1ENV = rNR12


; --
; -- AUD1LOW/NR13 ($FF13)
; -- Frequency lo (W)
; --
rNR13 = $FF13
rAUD1LOW = rNR13


; --
; -- AUD1HIGH/NR14 ($FF14)
; -- Frequency hi (W)
; --
; -- Bit 7   - Initial (when set, sound restarts)
; -- Bit 6   - Counter/consecutive selection
; -- Bit 2-0 - Frequency's higher 3 bits
; --
rNR14 = $FF14
rAUD1HIGH = rNR14


;***************************************************************************
;*
;* SoundChannel #2 registers
;*
;***************************************************************************

; --
; -- AUD2LEN/NR21 ($FF16)
; -- Sound Length; Wave Pattern Duty (R/W)
; --
; -- see AUD1LEN for info
; --
rNR21 = $FF16
rAUD2LEN = rNR21


; --
; -- AUD2ENV/NR22 ($FF17)
; -- Envelope (R/W)
; --
; -- see AUD1ENV for info
; --
rNR22 = $FF17
rAUD2ENV = rNR22


; --
; -- AUD2LOW/NR23 ($FF18)
; -- Frequency lo (W)
; --
rNR23 = $FF18
rAUD2LOW = rNR23


; --
; -- AUD2HIGH/NR24 ($FF19)
; -- Frequency hi (W)
; --
; -- see AUD1HIGH for info
; --
rNR24 = $FF19
rAUD2HIGH = rNR24


;***************************************************************************
;*
;* SoundChannel #3 registers
;*
;***************************************************************************

; --
; -- AUD3ENA/NR30 ($FF1A)
; -- Sound on/off (R/W)
; --
; -- Bit 7   - Sound ON/OFF (1EQUON,0EQUOFF)
; --
rNR30 = $FF1A
rAUD3ENA = rNR30


; --
; -- AUD3LEN/NR31 ($FF1B)
; -- Sound length (R/W)
; --
; -- Bit 7-0 - Sound length
; --
rNR31 = $FF1B
rAUD3LEN = rNR31


; --
; -- AUD3LEVEL/NR32 ($FF1C)
; -- Select output level
; --
; -- Bit 6-5 - Select output level
; --           00: 0/1 (mute)
; --           01: 1/1
; --           10: 1/2
; --           11: 1/4
; --
rNR32 = $FF1C
rAUD3LEVEL = rNR32


; --
; -- AUD3LOW/NR33 ($FF1D)
; -- Frequency lo (W)
; --
; -- see AUD1LOW for info
; --
rNR33 = $FF1D
rAUD3LOW = rNR33


; --
; -- AUD3HIGH/NR34 ($FF1E)
; -- Frequency hi (W)
; --
; -- see AUD1HIGH for info
; --
rNR34 = $FF1E
rAUD3HIGH = rNR34


; --
; -- AUD4LEN/NR41 ($FF20)
; -- Sound length (R/W)
; --
; -- Bit 5-0 - Sound length data (# 0-63)
; --
rNR41 = $FF20
rAUD4LEN = rNR41


; --
; -- AUD4ENV/NR42 ($FF21)
; -- Envelope (R/W)
; --
; -- see AUD1ENV for info
; --
rNR42 = $FF21
rAUD4ENV = rNR42


; --
; -- AUD4POLY/NR43 ($FF22)
; -- Polynomial counter (R/W)
; --
; -- Bit 7-4 - Selection of the shift clock frequency of the (scf)
; --           polynomial counter (0000-1101)
; --           freqEQUdrf*1/2^scf (not sure)
; -- Bit 3 -   Selection of the polynomial counter's step
; --           0: 15 steps
; --           1: 7 steps
; -- Bit 2-0 - Selection of the dividing ratio of frequencies (drf)
; --           000: f/4   001: f/8   010: f/16  011: f/24
; --           100: f/32  101: f/40  110: f/48  111: f/56  (fEQU4.194304 Mhz)
; --
rNR43 = $FF22
rAUD4POLY = rNR43


; --
; -- AUD4GO/NR44 ($FF23)
; -- (has wrong name and value (ff30) in Dr.Pan's doc!)
; --
; -- Bit 7 -   Inital
; -- Bit 6 -   Counter/consecutive selection
; --
rNR44 = $FF23
rAUD4GO = rNR44 ; silly name!

;***************************************************************************
;*
;* Cart related
;*
;***************************************************************************

CART_COMPATIBLE_DMG     = $00
CART_COMPATIBLE_DMG_GBC = $80
CART_COMPATIBLE_GBC     = $C0

CART_ROM                     = $00
CART_ROM_MBC1                = $01
CART_ROM_MBC1_RAM            = $02
CART_ROM_MBC1_RAM_BAT        = $03
CART_ROM_MBC2                = $05
CART_ROM_MBC2_BAT            = $06
CART_ROM_RAM                 = $08
CART_ROM_RAM_BAT             = $09
CART_ROM_MBC3_BAT_RTC        = $0F
CART_ROM_MBC3_RAM_BAT_RTC    = $10
CART_ROM_MBC3                = $11
CART_ROM_MBC3_RAM            = $12
CART_ROM_MBC3_RAM_BAT        = $13
CART_ROM_MBC5                = $19
CART_ROM_MBC5_BAT            = $1A
CART_ROM_MBC5_RAM_BAT        = $1B
CART_ROM_MBC5_RUMBLE         = $1C
CART_ROM_MBC5_RAM_RUMBLE     = $1D
CART_ROM_MBC5_RAM_BAT_RUMBLE = $1E
CART_ROM_MBC7_RAM_BAT_GYRO   = $22
CART_ROM_POCKET_CAMERA       = $FC

CART_ROM_256K = 0 ; 2 banks
CART_ROM_512K = 1 ; 4 banks
CART_ROM_1M   = 2 ; 8 banks
CART_ROM_2M   = 3 ; 16 banks
CART_ROM_4M   = 4 ; 32 banks
CART_ROM_8M   = 5 ; 64 banks
CART_ROM_16M  = 6 ; 128 banks
CART_ROM_32M  = 7 ; 256 banks
CART_ROM_64M  = 8 ; 512 banks

CART_RAM_NONE = 0
CART_RAM_16K  = 1 ; 1 incomplete bank
CART_RAM_64K  = 2 ; 1 bank
CART_RAM_256K = 3 ; 4 banks
CART_RAM_1M   = 4 ; 16 banks

CART_RAM_ENABLE  = $0A
CART_RAM_DISABLE = $00

;***************************************************************************
;*
;* Keypad related
;*
;***************************************************************************

PADF_DOWN   = $80
PADF_UP     = $40
PADF_LEFT   = $20
PADF_RIGHT  = $10
PADF_START  = $08
PADF_SELECT = $04
PADF_B      = $02
PADF_A      = $01

PADB_DOWN   = $7
PADB_UP     = $6
PADB_LEFT   = $5
PADB_RIGHT  = $4
PADB_START  = $3
PADB_SELECT = $2
PADB_B      = $1
PADB_A      = $0

;***************************************************************************
;*
;* Screen related
;*
;***************************************************************************

SCRN_X    = 160 ; Width of screen in pixels
SCRN_Y    = 144 ; Height of screen in pixels
SCRN_X_B  = 20  ; Width of screen in bytes
SCRN_Y_B  = 18  ; Height of screen in bytes

SCRN_VX   = 256 ; Virtual width of screen in pixels
SCRN_VY   = 256 ; Virtual height of screen in pixels
SCRN_VX_B = 32  ; Virtual width of screen in bytes
SCRN_VY_B = 32  ; Virtual height of screen in bytes


.endif  ; HARDWARE_INC

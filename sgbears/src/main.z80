include "src/hardware.inc"
include "src/global.inc"

TITLE_CARD_WIDTH = 13
TITLE_CARD_HEIGHT = 2
TITLE_CARD_TIME = 360
TITLE_CARD_COUNT = 3

TITLE_CARD_BYTES = TITLE_CARD_WIDTH * TITLE_CARD_HEIGHT * 8
TITLE_CARD_FIRST_TILE = 128 - (TITLE_CARD_WIDTH * TITLE_CARD_HEIGHT)
TITLE_CARD_CHRBASE = $9000 + 16 * TITLE_CARD_FIRST_TILE

section "hLocals", HRAM[hLocals]
  ds 16

section "hState", HRAM
hTitleTimer:     ds 1
hTitleCardsLeft: ds 1
hTitleSrc:       ds 2
hCapability::    ds 1
hDelayAmount::   ds 1

section "scratchbuffers", WRAM0
help_line_buffer:: ds TITLE_CARD_BYTES
popslide_sp_save: ds 2

STACK_SIZE EQU 64
section "stack", WRAM0, ALIGN[2]
stack_top: ds STACK_SIZE

section "header", ROM0[$0100]
  nop
  jp past_header
  ds 76, $00
past_header:
  di
  ld sp, stack_top + STACK_SIZE  ; Set up stack pointer (full descending)

  ; Detect GBC
  xor $11
  cp 1  ; CF = 1 for GBC
  ld a, 0  ; preserve carry
  rra
  ldh [hCapability], a

  ; Vblank is the only interrupt we use
  xor a
  ldh [cur_keys], a
  ldh [hVblanks], a
  ldh [rIF], a

  inc a  ; ld a, IEF_VBLANK
  ldh [rIE], a
  ld a,P1F_GET_NONE
  ldh [rP1],a

  ; Copy the sprite DMA routine to HRAM
  ld hl,hramcode_start
  ld de,run_dma
  call memcpy_pascal16

  ; prevent bgb with all exceptions on from having a coronary
  call lcd_off
  xor a
  ld hl, _OAMRAM
  ld c, 160
  rst memset_tiny
  ld hl, SOAM
  ld c, 160
  rst memset_tiny

  call load_guest_pic
  call init_title_card
  call load_menu_tiles

  ldh a, [hCapability]
  add a
  jr c, .is_gbc
    ; If not GBC, detect SGB.
    ; First wait a bit longer for SGB to warm up
    call sgb_wait
    call sgb_wait
    call sgb_wait
    call sgb_wait
    call detect_sgb
    ldh a, [hCapability]
    rra
    jr c, .is_sgb
  .is_gbc:
    ; On DMG/MGB and color systems, show a notice that this
    ; test works only on Super Game Boy

    xor a
    ld [oam_used], a
    ld hl, help_line_buffer
    ld a, (playmate_chr - menutiles_chr) / 8
    ld c, 24
    call memset_inc
    ld hl, help_line_buffer
    ld de, (160+8-48)*256 + (144+16-32)
    ld bc, 6*256 + 4
    call oam_put_rect
    call lcd_clear_oam

    ei
    call run_dma
    ld a, %11000000
    ldh [rOBP0], a
    ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8800|LCDCF_BG9800|LCDCF_WINOFF
    ldh [rLCDC], a
    .mono_forever:
      call update_title_card
      halt
      jr .mono_forever

  .is_sgb:

  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8800|LCDCF_BG9800|LCDCF_WINOFF
  ldh [rLCDC], a

  ; Set the playfield palette
  ld hl, Bears_pf_sgb_packets
  call sgb_send
  call sgb_send

  ; Load initial border
  call sgb_freeze
  ld de, Bears_border_chr0_0_pb16  ; Border without bear
  ld b, 0
  call sgb_uncompress_chr_trn
  ld de, Bears_border_chr1_pb16
  ld b, 1
  call sgb_uncompress_chr_trn
  ld de, Bears_border_tilemap_pb16
  call sgb_load_map_and_palette

  ; And reload the playfield
  call load_guest_pic
  call load_menu_tiles
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8800|LCDCF_BG9800|LCDCF_WINOFF
  ldh [rLCDC], a
  call sgb_unfreeze

  ; Ask for a delay amount
  ld a, 60
  ldh [hDelayAmount], a
  .editloop:
    call update_title_card
    call read_pad
    ld b, PADF_LEFT|PADF_RIGHT
    call autorepeat
    ldh a, [new_keys]
    ld b, a
    ldh a, [hDelayAmount]
    bit PADB_RIGHT, b
    jr z, .notRight
      inc a
    .notRight:
    bit PADB_LEFT, b
    jr z, .notLeft
      dec a
    .notLeft:
    cp 100
    jr nc, .out_of_range
      ldh [hDelayAmount], a
    .out_of_range:
  
    ; Load menu layout.  Active digits are help_line_buffer[5] and [6]
    ld hl, delay_layout
    ld de, help_line_buffer
    call memcpy_pascal16
    ldh a, [hDelayAmount]
    call bcd8bit_ac
    or a
    jr nz, .tens_nonzero
      ld a, $0A
    .tens_nonzero:
    ld hl, help_line_buffer + 5
    ld [hl+], a
    ld [hl], c
    xor a
    ld [oam_used], a
    ld hl, help_line_buffer
    ld de, (160+8-64)*256 + (144+16-16)
    ld bc, 8*256 + 2
    call oam_put_rect
    call lcd_clear_oam
    ei
    call wait_vblank_run_dma
    ld a, %11000000
    ldh [rOBP0], a
    di
    ld a, [new_keys]
    and PADF_A|PADF_START
    jr z, .editloop

  call sgb_freeze
  ld de, Bears_border_chr0_1_pb16  ; Papa
  ld b, 0
  call sgb_uncompress_chr_trn
  ld de, Bears_border_tilemap_pb16
  call sgb_load_map_and_palette

  ; After receiving the tilemap and palette, Super Game Boy system
  ; software waits about 1 second before receiving the CHR (tile)
  ; data.  We test this by changing what bear's likeness is in CHR
  ; in order to to have the correct bear loaded when it reads CHR.
  ;
  ; sgb_uncompress_chr_trn left us with the identity tilemap
  ; sgb_load_map_and_palette left us with LCD off
  ld a, [hDelayAmount]
  or a
  jr z, .no_wait
    ld b, a
    ld a, LCDCF_ON|LCDCF_BGON
    ldh [rLCDC], a
    ei
    .delayAmount_loop:
      call wait_vblank_irq
      dec b
      jr nz, .delayAmount_loop
    di
  .no_wait:
  ld de, Bears_border_chr0_2_pb16  ; Cubby
  ld b, 0
  call sgb_uncompress_chr_trn
  ld de, Bears_border_chr0_3_pb16  ; Mama
  ld b, 0
  call sgb_uncompress_chr_trn

  call load_guest_pic
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_BG8800|LCDCF_BG9800|LCDCF_WINOFF
  ldh [rLCDC], a
  call sgb_unfreeze

  .forever
    halt
    jr .forever

;;
; Loads the scene with Goldilocks into GB VRAM
load_guest_pic:
  call lcd_off
  ld a, %11100100
  ldh [rBGP], a
  ; Load Goldilocks in the bears' house
  ld de, Bears_pf_pb16
  ld a, [de]
  ld b, a
  inc de
  ld hl, _VRAM8800
  call pb16_unpack_block
  ld hl, Bears_pf_tilemap
  ld de, _SCRN0
  jp load_full_nam

load_menu_tiles:
  ; Load the error message in case this isn't a Super Game Boy
  ld de, menutiles_chr
  ld hl, _VRAM8000
  ld bc, 65536 - (playmate_chr.end - menutiles_chr)
  .spritevramexpandloop:
    ld a, [de]
    inc de
    ld [hl+], a
    ld a, $FF
    ld [hl+], a
    inc c
    jr nz, .spritevramexpandloop
    inc b
    jr nz, .spritevramexpandloop
  ret

;;
; @param DE pointer to length-prefixed PB16-compressed SNES tiles
; @param B 0 for CHR_TRN 0 (tiles 0-127) or 1 for CHR_TRN 1
;     (tiles 128-255)
; @return everything clobbered; identity tilemap in _SCRN0
sgb_uncompress_chr_trn:
  push bc
  push de
  call sgb_load_trn_tilemap
  pop de
  ld a, [de]
  add a  ; each SNES tile is 2 GB tiles
  ld b, a
  inc de
  ld hl, _VRAM8000
  call pb16_unpack_block
  pop bc
  ld a, $13*8+1  ; CHR_TRN
  jp sgb_send_trn_ab

;;
; Loads an 896-entry PB16 compressed SGB border tilemap with no
; flipping and one 16-color palette.
; @param DE pointer to tilemap followed by palette
; @param _SCRN0 identity tilemap
; @param rBGP identity colormap
sgb_load_map_and_palette:
  ld hl, _VRAM8800
  ld b, 896/16
  call pb16_unpack_block
  push de  ; Tilemap immediately followed by palette

  ; Pull 896 even bytes from tilemap and set odd bytes to $10
  ; vhpcccnn
  ; ||||||++- tile number bits 9-8 (always 0 for border)
  ; |||+++--- palette ID (4 to 7 for border; we use only 4)
  ; ||+------ priority (always 0 for border)
  ; |+------- horizontal flip (Pino decided it's not worth complexity)
  ; +-------- vertical flip (likewise)
  ld de, _VRAM8800
  ld hl, _VRAM8000
  ld bc, 65536 - 896
  .interleave:
    ld a, [de]
    inc de
    ld [hl+], a
    ld a, $10
    ld [hl+], a
    inc c
    jr nz, .interleave
    inc b
    jr nz, .interleave

  ; Load the palette verbatim
  pop hl
  ld de, _VRAM8800
  ld bc, 32
  call memcpy
  ld a, $14*8+1  ; PCT_TRN
  ld b, $00
  jp sgb_send_trn_ab

;;
; Copies a B column by C row tilemap from HL to OAM starting at (D, E)
; Bit 7 of each entry set for horizontal flipping
oam_put_rect:
  push bc
  push de
  .tileloop:
    ld a, [hl+]
    push hl
    ld c, a
    ld hl, oam_used
    ld l, [hl]
    ld a, e  ; Write Y
    ld [hl+], a
    ld a, d  ; Write X
    ld [hl+], a
    add 8
    ld d, a
    ld a, c  ; Write tile number
    and $7F
    ld [hl+], a
    xor c  ; Write horizontal flip
    rrca
    rrca
    ld [hl+], a
    ld a, l
    ld [oam_used], a
    pop hl
    dec b
    jr nz, .tileloop
  pop de
  pop bc
  ld a, e  ; Move E to next row
  add 8
  ld e, a
  dec c
  jr nz, oam_put_rect
  ret

; Title card ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

init_title_card:
  ; Set up nametable

  ld hl, _SCRN0
  ld de, _SCRN1
  ld bc, 32*18
  call memcpy

  ld hl, _SCRN1 + 10 - TITLE_CARD_WIDTH / 2
  ld a, TITLE_CARD_FIRST_TILE
  ld b, TITLE_CARD_HEIGHT
  .rowloop
    ld c, TITLE_CARD_WIDTH
    call memset_inc
    ld de, 32 - TITLE_CARD_WIDTH
    add hl, de
    dec b
    jr nz, .rowloop

  ld de, TITLE_CARD_CHRBASE
  ld h, $FF
  ld bc, TITLE_CARD_BYTES*2
  call memset

  ld hl, hTitleTimer
  ld [hl], 1  ; schedule next update immediately
  inc hl
  ld [hl], TITLE_CARD_COUNT
  inc hl
  ld [hl], low(credit_pb16)
  inc hl
  ld [hl], high(credit_pb16)
  ret

update_title_card:
  ldh a, [hVblanks]
  and $03
  ret nz
  ld hl, hTitleTimer
  dec [hl]
  ret nz
  ld [hl], TITLE_CARD_TIME / 4
  inc hl  ; HL = hTitleCardsLeft

  ld a, [hl]
  cp 1   ; CF set if cards left to show has reached zero
  sbc a
  and LCDCF_BG9C00
  xor LCDCF_ON|LCDCF_BGON|LCDCF_BG8800|LCDCF_BG9C00|LCDCF_WINOFF|LCDCF_OBJON
  ldh [rLCDC], a
  and LCDCF_BG9C00
  ret z  ; update card only if shown

  ; Load and display one title card
  dec [hl]
  inc hl  ; HL = hTitleSrc
  ld a, [hl+]
  ld d, [hl]
  ld e, a
  ld hl, help_line_buffer
  ld b, TITLE_CARD_BYTES / 16
  call pb16_unpack_block
  ld a, e               ; point to end of card's compressed data
  ldh [hTitleSrc+0], a
  ld a, d
  ldh [hTitleSrc+1], a
  ; fall through to blit_title_card

blit_title_card:
  ld hl, help_line_buffer
  ld de, TITLE_CARD_CHRBASE
  ld c, TITLE_CARD_BYTES / 4
  ; fall through to popslide_1to2bpp

;;
; Expands 1bpp tiles to 2bpp as colors 0 and 3 using a stack copy.
; @param HL source address (usually ROM or WRAM)
; @param DE destination address (usually VRAM)
; @param C number of half tiles) to expand
; @return C = 0; IME on
popslide_1to2bpp::
  di
  ldh a, [rIE]    ; save interrupt config and stack pointer
  push af
  ldh a, [rSTAT]
  push af
  ld [popslide_sp_save],sp

  ld a, IEF_LCDC  ; set hblank as only interrupt that ends HALT
  ld [rIE], a
  ld a, STATF_MODE00
  ld [rSTAT], a
  ld sp, hl     ; set SP to the source address
  ld hl, rLCDC
  set 7, [hl]
  ld h,d        ; and HL to the destination
  ld l,e

  .loop
    xor a  ; discard interrupt
    ldh [rIF], a
  
    pop de  ; read before hblank
    ld b, d
    ld a, e
    pop de
    halt
    ld [hl+], a
    ld [hl+], a
    ld a, b
    ld [hl+], a
    ld [hl+], a
    ld a, e
    ld [hl+], a
    ld [hl+], a
    ld a, d
    ld [hl+], a
    ld [hl+], a
    dec c
    jr nz, .loop

  ld sp, popslide_sp_save  ; restore stack pointer
  pop hl                   ; optimization thanks to NieDzejkob
  ld sp, hl
  pop af
  ldh [rSTAT], a           ; restore interrupt config
  pop af
  ldh [rIE],a
  reti

; memcpy and friends ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "memset_tiny",ROM0[$08]
;;
; Writes C bytes of value A starting at HL.
memset_tiny::
  ld [hl+],a
  dec c
  jr nz,memset_tiny
  ret

section "memset_inc",ROM0
;;
; Writes C bytes of value A, A+1, ..., A+C-1 starting at HL.
memset_inc::
  ld [hl+],a
  inc a
  dec c
  jr nz,memset_inc
  ret

section "memcpy", ROM0
clear_scrn0_to_0::
  ld h, 0
clear_scrn0_to_h::
  ld de,_SCRN0
  ld bc,32*32
  ; fall through to memset

;;
; Writes BC bytes of value H starting at DE.
memset::
  ; Increment B if C is nonzero
  dec bc
  inc b
  inc c
  ld a, h
.loop:
  ld [de],a
  inc de
  dec c
  jr nz,.loop
  dec b
  jr nz,.loop
  ret

;;
; Copy a string preceded by a 2-byte length from HL to DE.
; @param HL source address
; @param DE destination address
memcpy_pascal16::
  ld a, [hl+]
  ld c, a
  ld a, [hl+]
  ld b, a
  ; fall through to memcpy

;;
; Copies BC bytes from HL to DE.
; @return A: last byte copied; HL at end of source;
; DE at end of destination; B=C=0
memcpy::
  ; Increment B if C is nonzero
  dec bc
  inc b
  inc c
.loop:
  ld a, [hl+]
  ld [de],a
  inc de
  dec c
  jr nz,.loop
  dec b
  jr nz,.loop
  ret

;;
; The routine gets copied to high RAM.  While OAM DMA is running,
; both ROM and WRAM are inaccessible; only HRAM is readable.
; But unlike on the NES, the CPU continues to fetch and execute
; instructions.  So a program needs to run 160 mcycles' worth of
; code from HRAM until this finishes.  Thus to present a display
; list, the program will call run_dma, not hramcode_start.
hramcode_start:
  dw hramcode_end-hramcode_start-2
  ld a,SOAM >> 8
  ldh [rDMA],a
  ld a,40
.loop:
  dec a
  jr nz,.loop
  ret
hramcode_end:


section "gfx", ROM0
menutiles_chr:
  incbin "obj/gb/menutiles.1b"
playmate_chr:
  incbin "obj/gb/sgb-playmate.1b"
  .end
credit_pb16:
  incbin "obj/gb/credit.1b.pb16"

delay_layout:
  dw 16  ; memcpy length
  db $0C,$0D,$0E,$0F,$8B,$06,$00,$0B  ; Delay: < 60 >
  db $0A,$0A,$0A,$0A,$10,$11,$12,$13  ;       A: Call
